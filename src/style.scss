/** @format */
$breakpoints: 320px, 400px, 600px, 782px, 960px, 1280px, 1440px;

@mixin breakpoint( $sizes... ) {
	@each $size in $sizes {
		@if type-of( $size ) == string {
			$approved-value: 0;
			@each $breakpoint in $breakpoints {
				$and-larger: '>' + $breakpoint;
				$and-smaller: '<' + $breakpoint;

				@if $size == $and-smaller {
					$approved-value: 1;
					@media (max-width: $breakpoint) {
						@content;
					}
				} @else {
					@if $size == $and-larger {
						$approved-value: 2;
						@media (min-width: $breakpoint + 1) {
							@content;
						}
					} @else {
						@each $breakpoint-end in $breakpoints {
							$range: $breakpoint + '-' + $breakpoint-end;
							@if $size == $range {
								$approved-value: 3;
								@media (min-width: $breakpoint + 1) and (max-width: $breakpoint-end) {
									@content;
								}
							}
						}
					}
				}
			}
			@if $approved-value == 0 {
				$sizes: '';
				@each $breakpoint in $breakpoints {
					$sizes: $sizes + ' ' + $breakpoint;
				}
				@warn 'ERROR in breakpoint( #{ $size } ) : You can only use these sizes[ #{$sizes} ] using the following syntax [ <#{ nth( $breakpoints, 1 ) } >#{ nth( $breakpoints, 1 ) } #{ nth( $breakpoints, 1 ) }-#{ nth( $breakpoints, 2 ) } ]';
			}
		} @else {
			$sizes: '';
			@each $breakpoint in $breakpoints {
				$sizes: $sizes + ' ' + $breakpoint;
			}
			@error 'ERROR in breakpoint( #{ $size } ) : Please wrap the breakpoint $size in parenthesis. You can use these sizes[ #{$sizes} ] using the following syntax [ <#{ nth( $breakpoints, 1 ) } >#{ nth( $breakpoints, 1 ) } #{ nth( $breakpoints, 1 ) }-#{ nth( $breakpoints, 2 ) } ]';
		}
	}
}


.d3-chart__container {
	position: relative;
	width: 100%;

	svg {
		overflow: visible;
	}

	.d3-chart__tooltip {
		border: 1px solid #ccd0d4;
		position: absolute;
		display: flex;
		min-width: 324px;
		height: auto;
		background-color: #ffffff;
		text-align: left;
		padding: 17px;
		box-shadow: 0 3px 20px 0 rgba(18, 24, 30, 0.1), 0 1px 3px 0 rgba(18, 24, 30, 0.1);
		flex-direction: column;
		flex-wrap: nowrap;
		justify-content: flex-start;
		pointer-events: none;
		visibility: hidden;
		z-index: 1;

		@include breakpoint( '<600px' ) {
			min-width: auto;
			width: calc(100% - #{24px * 2});
		}

		h4 {
			text-align: left;
			line-height: 18px;
			width: 100%;
			text-transform: uppercase;
			font-size: 11px;
			color: #6c7781;
			margin-top: 0;
		}

		ul {
			list-style: none;
			margin-bottom: 2px;
			margin-top: 2px;
			font-size: 14px;

			li {
				display: flex;
				flex-direction: row;
				flex-wrap: nowrap;
				justify-content: flex-start;
				align-items: center;

				&.key-row {
					display: flex;
					flex-direction: row;
					justify-content: space-between;
					width: 100%;

					.key-container {
						width: 100%;
						min-width: 100px;

						.key-color {
							display: inline-block;
							width: 16px;
							height: 16px;
							margin-right: 8px;
						}
						.key-key {
							margin-right: 6px;
						}
					}
					.key-value {
						font-weight: 600;
					}
				}
			}
		}
	}
	.bargroup {
		&rect {
			shape-rendering: crispEdges;
		}
	}
	.grid {
		.tick {
			line {
				stroke: #e2e4e7;
				stroke-width: 1;
				shape-rendering: crispEdges;
			}

			&:first-child {
				line {
					stroke: #555d66;
				}
			}

			&:last-child {
				line {
					opacity: 0;
				}
			}
		}
	}
	.tick {
		padding-top: 10px;
		stroke-width: 1;
	}
	.y-axis {
		text-anchor: start;
		&.tick {
			&text {
				fill: #555d66;
			}
		}
	}
	.y-axis,
	.axis-month {
		.tick text {
			font-size: 10px;
		}
	}

	.focus-grid {
		line {
			stroke: #ccd0d4;
			stroke-width: 1px;
		}
	}
}
